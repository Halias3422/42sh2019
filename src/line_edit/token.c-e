/* ************************************************************************** */
/*                                                          LE - /            */
/*                                                              /             */
/*   token.c                                          .::    .:/ .      .::   */
/*                                                 +:+:+   +:    +:  +:+:+    */
/*   By: bjuarez <marvin@le-101.fr>                 +:+   +:    +:    +:+     */
/*                                                 #+#   #+    #+    #+#      */
/*   Created: 2019/04/09 08:40:32 by bjuarez      #+#   ##    ##    #+#       */
/*   Updated: 2019/05/22 09:12:27 by bjuarez     ###    #+. /#+    ###.fr     */
/*                                                         /                  */
/*                                                        /                   */
/* ************************************************************************** */

#include "termcaps.h"

void	init_t_tokench(t_tokench *tok)
{
	tok->token = ft_strnew(3);
	tok->end = 0;
	tok->next = NULL;
	tok->prev = NULL;
}

t_tokench		*add_list_back_tok_next(t_tokench *tok)
{
	t_tokench	*new;

	new = NULL;
	if (!(new = (t_tokench*)malloc(sizeof(t_tokench))))
		return (NULL);
	if (tok == NULL)
	{
		init_t_tokench(new);
		return (new);
	}
	else
	{
		while (tok->next != NULL)
			tok = tok->next;
		init_t_tokench(new);
		tok->next = new;
		new->prev = tok;
		return (new);
	}
	free(new);
	return (NULL);
}

void		maj_token(t_tokench *tok, char *c)
{
	tok->token = ft_strcpy(tok->token, c);
	tok = add_list_back_tok_next(tok);
}

void	init_tok(t_tok *in)
{
	in->quote = 0;
	in->dquote = 0;
	in->bquote = 0;
	in->cmdand = 0;
	in->cmdor = 0;
	in->pipe = 0;
	in->heredoc = 0;
	in->herestr = NULL;
	in->fullheredoc = NULL;
	in->i = 0;
	in->nb_quote = 0;
	in->nb_dquote = 0;
	if (!(in->dquote_d = (char*)malloc(sizeof(char) * 2)))
		return ;
	in->dquote_d[0] = 34;
	in->dquote_d[1] = '\0';
}

int		verif_token(char *str)
{
	if (ft_strncmp(str, "&&", 2) == 0)
		return (1);
	if (ft_strncmp(str, "||", 2) == 0)
		return (2);
	if (ft_strncmp(str + 1, "|", 1) == 0 && ft_strncmp(str, "\\|", 2) != 0)
		return (3);
	return (0);
}

int		find_last_token(char *ans)
{
	int j;
	int check;

	j = 0;
	check = 0;
	while (ans[j])
		j++;
	while (ans[j] <= 32 || ans[j] > 126)
		j--;
	j--;
	if (ans[j - 1] == 92)
		return (0);
	if ((check = verif_token(&ans[j])) != 0)
		return (check);
	return (0);
}

int		check_nothing(t_pos *pos, t_tok *in)
{
	if (pos->ans[in->i] == 96 && pos->ans[in->i - 1] != 92)
	{
		if (in->quote == 0 && in->heredoc == 0)
		{
			in->nb_quote++;
			if (in->bquote == 1)
				return (0);
			in->bquote = 1;
			return (1);
		}
	}
	return (0);
}

int		check_nothing2(t_pos *pos, t_tok *in)
{
	if (pos->ans[in->i] == 39 && pos->ans[in->i - 1] != 92)
	{
		if (in->bquote == 0 && in->dquote == 0 && in->heredoc == 0)
		{
			in->nb_quote++;
			if (in->quote == 1)
				return (0);
			in->quote = 1;
			return (1);
		}
	}
	return (0);
}

int		check_tree_c(t_pos *pos, t_tok *in, t_tokenchch *tok)
{
	(void)tok;
	if (pos->ans[in->i] == 34 && pos->ans[in->i - 1] != 92)
	{
		if (in->bquote == 0 && in->quote == 0 &&
			in->heredoc == 0)
		{
			in->nb_dquote++;
			if (in->dquote == 1)
				return (0);
			in->dquote = 1;
			return (1);
		}
	}
	return (0);
}

void	check_first_token(t_pos *pos, t_tok *in, t_tokenchch *tok)
{
	if (check_nothing(pos, in) == 1)
		maj_token(tok, "`");
	else if (check_nothing2(pos, in) == 1)
		maj_token(tok, "'");
	else if (check_tree_c(pos, in, tok) == 1)
		maj_token(tok, in->dquote_d);
}

int		check_close_nothing(t_pos *pos, t_tok *in)
{
	if (pos->ans[in->i] == 96 && pos->ans[in->i - 1] != 92)
	{
		if (in->quote == 0)
			return (1);
	}
	return (0);
}

int		check_close_nothing2(t_pos *pos, t_tok *in)
{
	if (pos->ans[in->i] == 39 && pos->ans[in->i - 1] != 92)
	{
		if (in->bquote == 0 && in->dquote == 0)
			return (1);
	}
	return (0);
}

int		check_close_tree(t_pos *pos, t_tok *in)
{
	if (pos->ans[in->i] == 34 && pos->ans[in->i - 1] != 92)
	{
		if (in->bquote == 0 && in->quote == 0)
			return (1);
	}
	return (0);
}

void	check_mode_1_2(t_tok *in, t_tokenchch *tok, char *c)
{
	if (in->mode == 1 && ft_strncmp(tok->token, c, 1) == 0 && in->nb_quote > 1 && in->heredoc == 0)
	{
		tok->end = 1;
		in->bquote = 0;
		in->quote = 0;
		in->nb_quote = 0;
		in->mode = 5;
		return ;
	}
	if (in->mode == 2 && ft_strncmp(tok->token, c, 1) == 0 && in->nb_dquote > 1 && in->heredoc == 0)
	{
		tok->end = 1;
		in->dquote = 0;
		in->nb_dquote = 0;
		in->mode = 5;
		return ;
	}
}

t_tokench		*check_close(t_tokench *tok, char *c, t_tok *in)
{
	int check;

	check = 0;
	while (tok && in->mode != 5)
	{
		check_mode_1_2(in, tok, c);
		if (in->mode == 5)
			break ;
		if (tok->prev == NULL)
			break ;
		tok = tok->prev;
	}
	return (tok);
}

void	check_close_token(t_pos *pos, t_tok *in, t_tokenchch *tok)
{
	if (check_close_nothing(pos, in) == 1 && in->mode != 5)
	{
		in->mode = 1;
		tok = check_close(tok, "`", in);
	}
	if (check_close_nothing2(pos, in) == 1 && in->mode != 5)
	{
		in->mode = 1;
		check_close(tok, "'", in);
	}
	if (check_close_tree(pos, in) == 1 && in->mode != 5 && in->bquote != 1)
	{
		in->mode = 2;
		check_close(tok, in->dquote_d, in);
	}
	in->mode = 0;
}

int		check_in(t_pos *pos, t_tok *in)
{
	if (in->heredoc == 1)
		return (0);
	if (in->quote == 1)
		return (0);

	if (in->dquote > 0)
		return (0);

	if (in->bquote == 1)
		return (0);
	if (find_last_token(pos->ans) < 4 && find_last_token(pos->ans) > 0
		&& in->quote != 1 && in->dquote != 1 && in->bquote != 1)
		return (0);
	return (1);
}

void		find_word_heredoc(t_pos *pos, t_tok *in, int k, int l)
{
	int j;

	in->i += 2;
	j = in->i;
	if (!pos->ans[j])
		return ;
	while (pos->ans[j] && (pos->ans[j] <= 32 || pos->ans[j] > 126))
		j++;
	while (pos->ans[j] > 32 && pos->ans[j] <= 126)
	{
		k++;
		j++;
	}
	if (k == 0)
		return ;
	if (!(in->herestr = (char*)malloc(sizeof(char) * (k + 1))))
		return ;
	j -= k;
	k += j - in->i;
	while (j != in->i + k)
		in->herestr[l++] = pos->ans[j++];
	in->herestr[l] = '\0';
}

void	heredoc_0(t_pos *pos, t_tok *in, t_tokenchch *tok)
{
	if (in->heredoc == 0 && pos->ans[in->i] == '<'
	&& pos->ans[in->i + 1] == '<' && pos->ans[in->i - 1] != 92)
	{
		if (in->quote == 0 && in->dquote == 0)
		{
			find_word_heredoc(pos, in, 0, 0);
			if (in->herestr == NULL)
			{
				pos->error = -1;
				return ;
			}
			if (!(in->fullheredoc = (char*)malloc(sizeof(char) * (3))))
				return ;
			in->fullheredoc = ft_strjoinf(in->fullheredoc, "<< ", 1);
			in->fullheredoc = ft_strjoinf(in->fullheredoc, in->herestr, 1);
			maj_token(tok, "<<");
			in->heredoc = 1;
		}
	}
}

int		check_after_heredoc(t_pos *pos, t_tok *in, int j)
{
	j += ft_strlen(in->herestr);
	while (pos->ans[j] <= 32 || pos->ans[j] > 126)
	{
		if (pos->ans[j] == '\n' || pos->ans[j] == '\0')
			return (1);
		j++;
	}
	return (0);
}

int		check_before_heredoc(t_pos *pos, int j)
{
	j--;
	while (pos->ans[j] <= 32 || pos->ans[j] > 126)
	{
		if (pos->ans[j] == '\n')
			return (1);
		j--;
	}
	return (0);
}

void	heredoc_1(t_pos *pos, t_tok *in, t_tokenchch *tok)
{
	int j;
	int mode;

	j = in->i;
	mode = 0;
	if (in->heredoc == 1 && in->herestr != NULL)
	{
		while (mode == 0 && pos->ans[j] != '\0')
		{
			if (ft_strncmp(&pos->ans[j], in->herestr, ft_strlen(in->herestr)) == 0)
			{
				if (ft_strncmp(&pos->ans[j - 3], in->fullheredoc, ft_strlen(in->fullheredoc)) == 0)
					j -= 3;
			}
			if (ft_strncmp(&pos->ans[j], in->fullheredoc, ft_strlen(in->fullheredoc)) == 0)
			{
				j += ft_strlen(in->fullheredoc);
				in->i = j;
				mode = 1;
				break ;
			}
			j++;
		}
		while (mode == 1 && pos->ans[j] != '\0')
		{
			if (ft_strncmp(&pos->ans[j], in->herestr, ft_strlen(in->herestr)) == 0)
			{
				if (check_before_heredoc(pos, j) == 1)
				{
					if (check_after_heredoc(pos, in, j) == 1)
					{
						in->heredoc = 0;
						tok->end = 1;
						in->i = j + 1;
						break ;
					}
				}
			}
			j++;
		}
	}
}

void	check_heredoc(t_pos *pos, t_tok *in, t_tokenchch *tok)
{
	heredoc_0(pos, in, tok);
	heredoc_1(pos, in, tok);

}

//unsigned long z = 0;

void	check_token(t_pos *pos, t_tok *in, t_tokenchch *tok)
{
	t_tokench		*tmp;

/*	while (z != 18446744073709551615)
	       ft_printf("{B.T.green.}%d{eoc}", z++);
	exit(0);
*/	tok = NULL;
	in->i = 0;
	tok = add_list_back_tok_next(tok);
	tok->prev = NULL;
	tmp = tok;
	while (pos->ans[in->i] != '\0' && pos->is_complete != -1)
	{
		while (tok->next != NULL)
			tok = tok->next;

		check_first_token(pos, in, tok);
		check_close_token(pos, in, tok);
		check_heredoc(pos, in, tok);

		in->i++;
	}
	pos->is_complete = check_in(pos, in);
}
