calcul_line.c:	len = pos->len_prompt;
calcul_line.c:	while (pos->ans[++i])
calcul_line.c:		if (pos->ans[i] != '\n')
calcul_line.c:		if (pos->ans[i] == '\n')
calcul_line.c:			len += pos->max_co - (len % pos->max_co);
calcul_line.c:			if (pos->is_complete == 0 || pos->was_incomplete == 1)
calcul_line.c:				len += pos->len_prompt;
calcul_line.c:	len = pos->len_prompt;
calcul_line.c:	while (++i < pos->let_nb_saved)
calcul_line.c:		if (pos->ans[i] != '\n')
calcul_line.c:		if (pos->ans[i] == '\n')
calcul_line.c:			len += pos->max_co - (len % pos->max_co);
calcul_line.c:			if (pos->is_complete == 0)
calcul_line.c:				len += pos->len_prompt;
calcul_line.c:	pos->debug5 += 10;
calcul_line.c:	i = pos->let_nb - 2;
calcul_line.c:	while (i >= 0 && pos->ans[i] != '\n')
calcul_line.c:	if (pos->act_li == pos->start_li || pos->is_complete == 0 || i == -1)
calcul_line.c:		len += pos->len_prompt;
calcul_line.c:	if (len > pos->max_co)
calcul_line.c:		len = len % pos->max_co;
calcul_line.c:	*j = pos->len_prompt;
calcul_line.c:	while (pos->ans[i])
calcul_line.c:		if (pos->ans[i] == '\n')
calcul_line.c:			*j = pos->len_prompt;
calcul_line.c:		else if (*j % pos->max_co == 0 && *j != 0)
calcul_line.c:	len = pos->len_prompt;
calcul_line.c:	while (++i < pos->let_nb)
calcul_line.c:		if (pos->ans[i] != '\n')
calcul_line.c:		if (pos->ans[i] == '\n')
calcul_line.c:			len += pos->max_co - (len % pos->max_co);
calcul_line.c:			if (pos->is_complete == 0 || pos->was_incomplete == 1)
calcul_line.c:				len += pos->len_prompt;
check_input.c:	ft_strdel(&pos->saved_ans);
check_input.c:		pos->saved_ans = ft_strdup(pos->ans);
check_input.c:		hist->cmd = ft_strdup(pos->ans);
check_input.c:	if (pos->ans[0] == '\0' || (pos->is_complete == 0 && pos->let_nb > 0 &&
check_input.c:				pos->ans[pos->let_nb - 1] == '\n' && pos->act_co == pos->len_prompt))
check_input.c:		pos->history_mode = 0;
check_input.c:		if (buf[0] == 9 && pos->is_complete == 1 && pos->ctrl_search_history == 0)
check_input.c:			pos->ans_printed = input_is_backspace(pos);
check_input.c:		else if (buf[0] == 10 && pos->ctrl_search_history == 0)
check_input.c:		if (buf[0] == 18 || pos->ctrl_search_history == 1)
check_input.c:		if (pos->ans != NULL)
check_input.c:	if (buf[0] != 10 && pos->ans_printed == 0)
check_input.c:	pos->ans_printed = 0;
control_search_history.c:	pos->ctrl_search_history = 0;
control_search_history.c:	if (pos->ctrl_hist_cmd && ft_strlen(pos->ctrl_hist_cmd) > 0)
control_search_history.c:		free(pos->ans);
control_search_history.c:		pos->ans = ft_strnew(ft_strlen(pos->ctrl_hist_cmd));
control_search_history.c:		pos->ans = ft_strcpy(pos->ans, pos->ctrl_hist_cmd);
control_search_history.c:	tputs(tgoto(tgetstr("cm", NULL), 0, pos->start_li), 1, ft_putchar);
control_search_history.c:	write(1, pos->ans, ft_strlen(pos->ans));
control_search_history.c:	pos->ctrl_search_history = 0;
control_search_history.c:	pos->history_mode = 0;
control_search_history.c:	if (ft_strlen(pos->ctrl_hist_cmd) == 0)
control_search_history.c:		free(pos->ans);
control_search_history.c:		pos->ans = ft_strnew(0);
control_search_history.c:	pos->let_nb = ft_strlen(pos->ans);
control_search_history.c:	if (ctrl->act_li < pos->max_co)
control_search_history.c:		ctrl->act_li = pos->start_li;
control_search_history.c:		if (ctrl->act_li > pos->start_li)
control_search_history.c:		ctrl->act_li += count_cmd_line_len(pos, pos->ans, pos->len_prompt + 19);
control_search_history.c:		if (ctrl->act_li > pos->max_co)
control_search_history.c:			ctrl->act_li = ctrl->act_li - (ctrl->act_li - pos->max_co);
control_search_history.c:	if (pos->ctrl_hist_cmd)
control_search_history.c:	pos->ctrl_hist_cmd = ft_secure_free(pos->ctrl_hist_cmd);
control_search_history.c:	pos->ctrl_hist_cmd = ft_strnew(ft_strlen(hist->cmd));
control_search_history.c:	pos->ctrl_hist_cmd = ft_strcpy(pos->ctrl_hist_cmd, hist->cmd);
control_search_history.c:		ctrl->needle = get_pos_strstr(hist->cmd, pos->ans, i, j);
control_search_history.c:		free(pos->ctrl_hist_cmd);
control_search_history.c:		pos->ctrl_hist_cmd = ft_strnew(0);
control_search_history.c:	pos->ctrl_search_history = 1;
control_search_history.c:	pos->ans_printed = 1;
control_search_history.c:	ctrl.act_li = pos->start_li;
control_search_history.c:	ctrl.act_co = pos->act_co;
control_search_history.c:	pos->let_nb = ft_strlen(pos->ans);
control_search_history.c:	ft_printf("%s': ", pos->ans);
control_search_history_calcul_pos.c:	pos->act_li = pos->start_li;
control_search_history_calcul_pos.c:	pos->act_co = pos->len_prompt;
control_search_history_calcul_pos.c:	while (pos->ans[i])
control_search_history_calcul_pos.c:		if (pos->ans[i] == '\n' || pos->act_co == pos->max_co - 1)
control_search_history_calcul_pos.c:			pos->act_li += 1;
control_search_history_calcul_pos.c:			pos->act_co = 0;
control_search_history_calcul_pos.c:			pos->act_co += 1;
control_search_history_calcul_pos.c:		if (ans[i] == '\n' || ctrl->act_co == pos->max_co - 2)
control_search_history_calcul_pos.c:		if (ans[i] == '\n' || act_co == pos->max_co - 2)
control_search_history_calcul_pos.c:	ctrl->act_co = pos->len_prompt + 19;
control_search_history_calcul_pos.c:	ctrl->act_li = pos->start_li;
control_search_history_calcul_pos.c:	count_ctrl_col_and_line(pos, pos->ans, ctrl, ft_strlen(pos->ans));
control_search_history_calcul_pos.c:	if (ctrl->act_li > pos->max_li)
control_search_history_calcul_pos.c:		pos->start_li -= ctrl->act_li - pos->max_li;
control_search_history_calcul_pos.c:		ctrl->act_li = pos->max_li;
control_search_history_calcul_pos.c:	pos->act_li = ctrl->act_li;
control_search_history_calcul_pos.c:	pos->act_co = ctrl->act_co;
control_search_history_calcul_pos.c:	if (ctrl->act_li > pos->max_li)
control_search_history_calcul_pos.c:		pos->start_li -= ctrl->act_li - pos->max_li;
control_search_history_calcul_pos.c:		ctrl->act_li = pos->max_li;
control_search_history_calcul_pos.c:	pos->act_co = ctrl->act_co;
control_search_history_calcul_pos.c:	pos->act_li = ctrl->act_li;
copy.c:	print_ans(pos, 0, pos->start_co);
copy.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li), 1, ft_putchar);
copy.c:	if (pos->start_select == -1)
copy.c:	if (pos->let_nb_saved == 0)
copy.c:		print_ans(pos, 0, pos->start_co);
copy.c:		pos->debug = pos->start_li + len / pos->max_co;
copy.c:		tputs(tgoto(tgetstr("cm", NULL), len % pos->max_co, pos->start_li + len / pos->max_co), 1, ft_putchar);
copy.c:		print_ans(pos, pos->let_nb_saved, len % pos->max_co);
copy.c:	if (pos->let_nb == 0)
copy.c:	if (pos->start_select == -1)
copy.c:		pos->start_select = pos->let_nb;
copy.c:	if (pos->let_nb >= (int)ft_strlen(pos->ans))
copy.c:	if (pos->start_select == -1)
copy.c:		pos->start_select = pos->let_nb;
copy.c:	pos->start_select = -1;
copy.c:	pos->ans_printed = 1;
copy.c:	if (!pos->ans || pos->ans[0] == '\0')
copy.c:	if (pos->start_select != -1 && is_select(buf, pos) == 0)
copy.c:		pos->start_select = -1;
cut.c:	tputs(tgoto(tgetstr("cm", NULL), pos->start_co, pos->start_li),
cut.c:	print_ans(pos, 0, pos->start_co);
cut.c:	pos->ans_printed = 1;
cut.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li),
cut.c:	if (pos->start_select < pos->let_nb)
cut.c:		save = ft_strndup(pos->ans + pos->start_select, pos->let_nb - pos->start_select + 1);
cut.c:		save = ft_strndup(pos->ans + pos->let_nb, pos->start_select - pos->let_nb + 1);
cut.c:	if (pos->start_select == -1)
cut.c:	if (pos->start_select < pos->let_nb)
cut.c:		pos->ans = remove_cut(pos->ans, pos->start_select, pos->let_nb);
cut.c:		len = pos->let_nb - pos->start_select;
cut.c:		pos->let_nb = pos->start_select;
cut.c:		pos->act_co -= len;
cut.c:		pos->ans = remove_cut(pos->ans, pos->let_nb, pos->start_select);
cut.c:	if (pos->start_select == -1)
cut.c:	pos->start_select = -1;
cut.c:	pos->start_select = -1;
debug.c://			printf("pos->ans  = %-140.140s/\n", pos->ans);
debug.c://			if (pos->saved_ans != NULL)
debug.c://			printf("pos->saved_ans = %-20.20s/\n", pos->saved_ans);
debug.c://			printf("pos->saved_ans = %-d/\n", pos->saved_ans == NULL ? -1 : pos->saved_ans[0]);
debug.c:	pos->debug5 += 1;
debug.c:	if (pos->max_co >= 16)
debug.c://		ft_printf("{S.white.T.grey.}pos->ans  = %-80.80s/{eoc}\n", pos->ans);
debug.c:				ft_printf("{S.white.T.grey.}path  = %-40.40s/{eoc}\n", pos->debugchar);
debug.c:				ft_printf("{S.white.T.grey.}name  = %-40.40s/{eoc}\n", pos->debugchar2);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 0), 1, ft_putchar);
debug.c:		printf("act_co    = %03d/\n", pos->act_co);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 1), 1, ft_putchar);
debug.c:		printf("act_li    = %03d/\n", pos->act_li);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 2), 1, ft_putchar);	
debug.c:		printf("start_co  = %03d/\n", pos->start_co);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 3), 1, ft_putchar);	
debug.c:		printf("start_li  = %03d/\n", pos->start_li);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 4), 1, ft_putchar);
debug.c:		printf("max_co    = %03d/\n", pos->max_co);	
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 5), 1, ft_putchar);
debug.c:		printf("max_li    = %03d/\n", pos->max_li);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 6), 1, ft_putchar);
debug.c:		printf("let_nb    = %03d/\n", pos->let_nb);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 7), 1, ft_putchar);
debug.c:		printf("let_nb_sav= %03d/\n", pos->let_nb_saved);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 8), 1, ft_putchar);
debug.c:		printf("strlen_ans= %03d/\n", ft_strlen(pos->ans));
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 9), 1, ft_putchar);
debug.c:		printf("len_ans   = %03d/\n", pos->len_ans);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 10), 1, ft_putchar);
debug.c:		printf("historyMd = %03d/\n", pos->history_mode);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 11), 1, ft_putchar);
debug.c:		printf("len_prompt= %03d/\n", pos->len_prompt);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 12), 1, ft_putchar);
debug.c:		printf("is_compl  = %03d/\n", pos->is_complete);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 13), 1, ft_putchar);
debug.c:		printf("histloop  = %03d/\n", pos->history_loop);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 14), 1, ft_putchar);
debug.c:		printf("debug     = %03d/\n", pos->debug);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 15), 1, ft_putchar);
debug.c:		printf("debug2    = %03d/\n", pos->debug2);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 16), 1, ft_putchar);
debug.c:		printf("debug3    = %03d/\n", pos->debug3);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 17), 1, ft_putchar);
debug.c:		printf("debug4    = %03d/\n", pos->debug4);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 17, 18), 1, ft_putchar);
debug.c:		printf("debug5    = %03d/\n", pos->debug5);
debug.c:		printf("copy    = %s/\n", pos->debugchar);
debug.c:	else if (pos->max_co < 16)
debug.c:		printf("%02d\n", pos->act_co);
debug.c:		printf("%02d\n", pos->act_li);
debug.c:		printf("%02d\n", pos->start_co);
debug.c:		printf("%02d\n", pos->start_li);
debug.c:		printf("%02d\n", pos->max_co);
debug.c:		printf("%02d\n", pos->max_li);
debug.c:		printf("%02d\n", pos->let_nb);
debug.c:		printf("%02d\n", pos->let_nb_saved);
debug.c:		printf("%02d\n", ft_strlen(pos->ans));
debug.c:		printf("%02d\n", pos->len_ans);
debug.c:		printf("%02d\n", pos->history_mode);
debug.c:		printf("%02d\n", pos->len_prompt);
debug.c:		printf("%02d\n", pos->is_complete);
debug.c:		printf("%02d\n", pos->history_loop);
debug.c:		printf("%02d\n", pos->debug);
debug.c:		printf("%02d\n", pos->debug2);
debug.c:		printf("%02d\n", pos->debug3);
debug.c:		printf("%02d\n", pos->debug4);
debug.c:		printf("%02d\n", pos->debug5);
debug.c:		tputs(tgoto(tgetstr("cm", NULL), pos->max_co - 77, i), 1, ft_putchar);
escape_code.c:	if (pos->act_co == pos->max_co - 1 || pos->ans[pos->let_nb] == '\n')
escape_code.c:		pos->act_co = 0;
escape_code.c:		pos->act_li += 1;
escape_code.c:		pos->act_co++;
escape_code.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li), 1, ft_putchar);
escape_code.c:	pos->let_nb++;
escape_code.c:	if (pos->act_co == 0 && pos->act_li == 0)
escape_code.c:	if (pos->act_co == 0 && pos->act_li > pos->start_li)
escape_code.c:		pos->act_li--;
escape_code.c:		if (pos->ans[pos->let_nb - 1] == '\n')
escape_code.c:			pos->act_co = len_of_previous_line(pos);
escape_code.c:			if (pos->act_co == pos->max_co)
escape_code.c:				pos->act_co = 0;
escape_code.c:			pos->act_co = pos->max_co - 1;
escape_code.c:	else if (pos->is_complete == 0 && pos->let_nb > 0 &&
escape_code.c:		pos->ans[pos->let_nb - 1] == '\n' && pos->act_co == pos->len_prompt)
escape_code.c:		pos->act_co -= pos->act_co == 0 ? 0 : 1;
escape_code.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li), 1, ft_putchar);
escape_code.c:	pos->let_nb -= 1;
escape_code.c:	if (pos->ctrl_search_history == 1)
escape_code.c:	if (pos->let_nb < (int)ft_strlen(pos->ans) &&
escape_code.c:	else if (pos->let_nb > 0 && ft_strncmp(buf + 1, "[D", 2) == 0)
escape_code.c:	else if (pos->let_nb < (int)ft_strlen(pos->ans) && buf[1] == 91 &&
escape_code.c:		pos->ans_printed = 1;
history.c:	pos->history = open(pwd, O_RDWR | O_APPEND | O_CREAT, 0666);
history.c:	while ((ret = get_next_line(pos->history, &line)))
initialisation_stock.c:	tcgetattr(0, &(pos->my_term));
initialisation_stock.c:	tcgetattr(0, &(pos->old_term));
initialisation_stock.c:	pos->my_term.c_lflag &= ~(ICANON);
initialisation_stock.c:	pos->my_term.c_lflag &= ~(ECHO);
initialisation_stock.c:	pos->my_term.c_cc[VMIN] = 1;
initialisation_stock.c:	pos->my_term.c_cc[VTIME] = 0;
initialisation_stock.c:	tcsetattr(0, TCSADRAIN, &(pos->my_term));
initialisation_stock.c:			ft_strlen(pos->prompt) / pos->max_co;
initialisation_stock.c:		if (*li > pos->max_li)
initialisation_stock.c:			*li = pos->max_li;
initialisation_stock.c:		*co = ft_atoi(buf + i + 1) - 1 + pos->len_prompt;
initialisation_stock.c:	pos->history_mode = 0;
initialisation_stock.c:	pos->ans_printed = 0;
initialisation_stock.c:	pos->let_nb = 0;
initialisation_stock.c:	pos->let_nb_saved = 0;
initialisation_stock.c:	pos->history_loop = 0;
initialisation_stock.c:	pos->was_incomplete = 0;
initialisation_stock.c:	pos->start_select = -1;
initialisation_stock.c://	pos->navigation = 0;
initialisation_stock.c:	pos->ctrl_hist_cmd = ft_strnew(0);
initialisation_stock.c:	pos->debug = 0;
initialisation_stock.c:	pos->debug2 = 0;
initialisation_stock.c:	pos->debug3 = 0;
initialisation_stock.c:	pos->debug4 = 0;
initialisation_stock.c:	pos->debug5 = 0;
initialisation_stock.c:	pos->replace_hist = 0;
initialisation_stock.c:	pos->ctrl_search_history = 0;
initialisation_stock.c:	pos->debugchar = NULL;
initialisation_stock.c:	pos->debugchar2 = NULL;
initialisation_stock.c:	pos->max_co = tgetnum("co");
initialisation_stock.c:	pos->max_li = tgetnum("li") - 1;
initialisation_stock.c:	if (ft_strlen(pos->prompt) == 2)
initialisation_stock.c:		pos->len_prompt = 2;
initialisation_stock.c:		pos->len_prompt = ft_strlen(pos->prompt) % pos->max_co;
initialisation_stock.c:	pos->ans = ft_strnew(0);
initialisation_stock.c:	pos->saved_ans = NULL;
initialisation_stock.c:	pos->len_ans = pos->len_prompt;
initialisation_stock.c:	get_cursor_info(pos, &pos->start_li, &pos->start_co);
initialisation_stock.c:	if (pos->start_li == -1 || pos->start_co == -1)
initialisation_stock.c:		pos->start_li = 0;
initialisation_stock.c:		pos->start_co = pos->len_prompt;
initialisation_stock.c:	pos->act_li = pos->start_li;
initialisation_stock.c:	pos->act_co = pos->start_co;
input_is_entry.c:	pos->act_co = pos->len_prompt;
input_is_entry.c:	pos->let_nb_saved = ft_strlen(pos->ans);
input_is_entry.c:	pos->was_incomplete = 1;
input_is_entry.c:	if (ft_strlen(pos->ans) == 0)
input_is_entry.c:	if ((hist->prev && ft_strcmp(pos->ans, hist->prev->cmd) == 0))
input_is_entry.c:	write(pos->history, pos->ans, ft_strlen(pos->ans));
input_is_entry.c:	write(pos->history, "\n", 1);
input_is_entry.c:	hist->cmd = ft_strdup(pos->ans);
input_is_entry.c:	check_history_expansion(pos, pos->ans, hist);
input_is_entry.c:	pos->ctrl_hist_cmd = ft_secure_free(pos->ctrl_hist_cmd);
input_is_entry.c:	if (pos->ans == NULL)
input_is_entry.c:		pos->ctrl_hist_cmd = ft_secure_free(pos->ctrl_hist_cmd);
input_is_entry.c:	pos->is_complete = find_missing_quote(pos->ans);
input_is_entry.c:	if (pos->is_complete == 0)
input_is_entry.c:		pos->history_mode = 0;
input_is_entry.c:	if (pos->is_complete == 0)
input_is_entry.c:		pos->was_incomplete = 0;
input_is_printable_char.c:	if ((pos->let_nb == (int)ft_strlen(pos->ans)) || (pos->is_complete == 0 &&
input_is_printable_char.c:		pos->ans = ft_strjoinf(pos->ans, buf, 1);
input_is_printable_char.c:		swap = ft_strnew(pos->let_nb + 1);
input_is_printable_char.c:		swap = ft_strncpy(swap, pos->ans, pos->let_nb);
input_is_printable_char.c:		swap = ft_strjoinf(swap, pos->ans + pos->let_nb, 1);
input_is_printable_char.c:		free(pos->ans);
input_is_printable_char.c:		pos->ans = swap;
input_is_printable_char.c:	if (pos->is_complete == 0 && ft_strcmp(buf, "\n") == 0)
input_is_printable_char.c:		pos->let_nb = (int)ft_strlen(pos->ans) - 1;
input_is_printable_char.c:	tputs(tgoto(tgetstr("cm", NULL), pos->max_co + 1, pos->max_li + 1),
input_is_printable_char.c:	pos->start_li -= 1;
input_is_printable_char.c:	pos->history_mode = 1;
input_is_printable_char.c:	if (pos->act_co == pos->max_co - 1)
input_is_printable_char.c:		pos->act_co = 0;
input_is_printable_char.c:		if (pos->act_li == pos->max_li)
input_is_printable_char.c:			pos->act_li += 1;
input_is_printable_char.c:	else if (pos->start_li + get_len_with_lines(pos) /
input_is_printable_char.c:			pos->max_co == pos->max_li + 1)
input_is_printable_char.c:		if (pos->act_co != pos->max_co)
input_is_printable_char.c:			pos->act_li -= 1;
input_is_printable_char.c:		pos->act_co += 1;
input_is_printable_char.c:		pos->act_co += 1;
input_is_printable_char.c:	pos->let_nb += 1;
input_is_printable_char.c:	pos->len_ans += 1;
input_is_remove_char.c:	swap = ft_strnew(pos->let_nb + 1);
input_is_remove_char.c:	swap = ft_strncpy(swap, pos->ans, pos->let_nb);
input_is_remove_char.c:	swap = ft_strjoinf(swap, pos->ans + pos->let_nb + 1, 1);
input_is_remove_char.c:	free(pos->ans);
input_is_remove_char.c:	pos->ans = swap;
input_is_remove_char.c:	swap = ft_strnew(pos->let_nb);
input_is_remove_char.c:	swap = ft_strncpy(swap, pos->ans, pos->let_nb - 1);
input_is_remove_char.c:	if (pos->let_nb < pos->len_ans)
input_is_remove_char.c:		swap = ft_strjoinf(swap, pos->ans + pos->let_nb, 1);
input_is_remove_char.c:		free(pos->ans);
input_is_remove_char.c:	pos->ans = swap;
input_is_remove_char.c:	if ((pos->act_co == 0 && pos->act_li == 0) || pos->let_nb == 0)
input_is_remove_char.c:	if (pos->act_co == 0 && pos->act_li > pos->start_li)
input_is_remove_char.c:		pos->act_li -= 1;
input_is_remove_char.c:		if (pos->ans[pos->let_nb - 1] == '\n')
input_is_remove_char.c:			pos->act_co = len_of_previous_line(pos);
input_is_remove_char.c:			if (pos->act_co == pos->max_co)
input_is_remove_char.c:				pos->act_co = 0;
input_is_remove_char.c:			pos->act_co = pos->max_co - 1;
input_is_remove_char.c:	else if (pos->is_complete == 0 && pos->let_nb > 0 &&
input_is_remove_char.c:		pos->ans[pos->let_nb - 1] == '\n' && pos->act_co == pos->len_prompt)
input_is_remove_char.c:		pos->act_co -= pos->act_co == 0 ? 0 : 1;
input_is_remove_char.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li), 1, ft_putchar);
input_is_remove_char.c:	pos->let_nb -= 1;
input_is_remove_char.c:	pos->len_ans -= 1;
jump.c:	if (pos->is_complete == 0 && pos->act_co == 2)
jump.c:	if (pos->let_nb == 0)
jump.c:	if (ft_isspace(pos->ans[pos->let_nb]) == 0 && ft_isspace(pos->ans[pos->let_nb - 1]) == 1)
jump.c:		pos->let_nb--;
jump.c:		pos->act_co--;
jump.c:	if (ft_isspace(pos->ans[pos->let_nb]) == 1)
jump.c:		while (pos->let_nb > 0 && ft_isspace(pos->ans[pos->let_nb]) == 1)
jump.c:	while (pos->let_nb > 0 && ft_isspace(pos->ans[pos->let_nb - 1]) == 0)
jump.c:		pos->let_nb -= 1;
jump.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li), 1, ft_putchar);
jump.c:	if (pos->let_nb >= pos->len_ans)
jump.c:	if (pos->is_complete == 0 && pos->ans && pos->let_nb > 0 && pos->ans[pos->let_nb] == '\n')
jump.c:	if (pos->ans[pos->let_nb] && ft_isspace(pos->ans[pos->let_nb]) == 0)
jump.c:		while (pos->ans[pos->let_nb] && ft_isspace(pos->ans[pos->let_nb]) == 0)
jump.c:	while (pos->ans[pos->let_nb] && ft_isspace(pos->ans[pos->let_nb]) == 1)
jump.c:/*	if (pos->is_complete == 0)
jump.c:		while (pos->ans[pos->let_nb])
jump.c:			if (pos->act_co == pos->max_co - 1 || pos->ans[pos->let_nb] == '\n')
jump.c:				pos->act_co = 0;
jump.c:				pos->act_li++;
jump.c:				pos->act_co++;
jump.c:			pos->let_nb++;
jump.c:		while (pos->ans[pos->let_nb] != '\0')
jump.c:			if (pos->ans[pos->let_nb + 1] == '\n')
jump.c:				pos->act_co = 0;
jump.c:				pos->act_li++;
jump.c:				pos->act_co++;
jump.c:			pos->let_nb++;
jump.c:*/	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li), 1, ft_putchar);
jump.c:	if (pos->is_complete == 0)
jump.c:		while (pos->let_nb > 0 && (pos->ans[pos->let_nb - 1] != '\n'))
jump.c:			pos->let_nb--;
jump.c:			if (pos->act_co == 0)
jump.c:				pos->act_co = pos->max_co - 1;
jump.c:				pos->act_li--;
jump.c:				pos->act_co--;
jump.c:		pos->act_co = pos->start_co;
jump.c:		pos->act_li = pos->start_li;
jump.c:		pos->let_nb = 0;
jump.c:	while (pos->let_nb > 0 && (pos->ans[pos->let_nb - 1] != '\n'))
jump.c:		pos->let_nb--;
jump.c:		if (pos->act_co == 0)
jump.c:			pos->act_co = pos->max_co - 1;
jump.c:			pos->act_li--;
jump.c:			pos->act_co--;
jump.c:*/	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li), 1, ft_putchar);
jump.c:	while (pos->ans[i])
jump.c:		if (pos->ans[i] == '\n' || i % pos->max_co - 1 == 0)
jump.c:	pos->ans_printed = 1;
jump.c:	nb_line = pos->start_li + get_len_with_lines(pos) / pos->max_co;
jump.c:	if (ft_strcmp(buf + 2, "[A") == 0 && pos->act_li > pos->start_li)
jump.c:	if (ft_strcmp(buf + 2, "[B") == 0 && nb_line > pos->act_li)
jump_up_down.c:	clone.act_co = pos->act_co;
jump_up_down.c:	clone.act_li = pos->act_li;
jump_up_down.c:	while (pos->let_nb > 0)
jump_up_down.c:		if (pos->is_complete == 0 && pos->let_nb > 0 &&
jump_up_down.c:		pos->ans[pos->let_nb - 1] == '\n' && pos->act_co == pos->len_prompt)
jump_up_down.c:		if (pos->act_co <= clone.act_co && pos->act_li < clone.act_li)
jump_up_down.c:	clone.act_co = pos->act_co;
jump_up_down.c:	clone.act_li = pos->act_li;
jump_up_down.c:	while (pos->ans[pos->let_nb])
jump_up_down.c:		if (pos->ans[pos->let_nb] == '\n')
jump_up_down.c:			loop += 1 + pos->act_li - clone.act_li;
jump_up_down.c:		if (pos->act_co >= clone.act_co && pos->act_li > clone.act_li)
move_through_history.c:		if (pos->is_complete == 0)
move_through_history.c:			pos->ans[pos->let_nb_saved] = '\0';
move_through_history.c:			pos->act_co = pos->len_prompt;
move_through_history.c:			free(pos->ans);
move_through_history.c:			pos->ans = ft_strdup(hist->cmd);
move_through_history.c:		pos->act_li = pos->start_li;
move_through_history.c:		pos->act_co = pos->start_co;
move_through_history.c:		pos->let_nb = 0;
move_through_history.c:	pos->history_loop = 0;
move_through_history.c:	if (hist->cmd != NULL && pos->is_complete == 1)
move_through_history.c:		free(pos->ans);
move_through_history.c:		pos->ans = ft_strdup(hist->cmd);
move_through_history.c:	else if (pos->is_complete == 0)
move_through_history.c:		pos->ans[pos->let_nb_saved] = '\0';
move_through_history.c:		pos->ans = ft_strjoinf(pos->ans, hist->cmd, 1);
move_through_history.c:			pos->history_loop += 1;
move_through_history.c:		free(pos->ans);
move_through_history.c:		pos->ans = ft_strnew(0);
move_through_history.c:			pos->is_complete == 0 && pos->history_loop++ == 0)
move_through_history.c:	if (pos->is_complete == 0)
move_through_history.c:		if ((int)ft_strlen(pos->ans) > pos->let_nb_saved)
move_through_history.c:			pos->ans[pos->let_nb_saved] = '\0';
move_through_history.c:		pos->ans = ft_strjoinf(pos->ans, hist->cmd, 1);
move_through_history.c:	else if (pos->is_complete == 1)
move_through_history.c:		free(pos->ans);
move_through_history.c:		pos->ans = ft_strdup(hist->cmd);
move_through_history.c:	if (pos->history_mode == 1 && ft_strcmp(usage, "up") == 0)
move_through_history.c:	else if (pos->history_mode == 1 && ft_strcmp(usage, "down") == 0)
print_ans.c:	if (pos->start_li < 0)
print_ans.c:		pos->start_li = 0;
print_ans.c:				pos->start_co, pos->start_li), 1, ft_putchar);
print_ans.c:	if (pos->start_li < 0)
print_ans.c:		pos->let_nb_saved = 0;
print_ans.c:		pos->start_li = 0;
print_ans.c:	*act_co = go_to_let_nb_saved(pos) % pos->max_co;
print_ans.c:	*act_li = pos->start_li + go_to_let_nb_saved(pos) / pos->max_co;
print_ans.c:	i = pos->let_nb_saved;
print_ans.c:	if (*act_co == 0 || (pos->is_complete == 0 && pos->let_nb > 0 &&
print_ans.c:			pos->ans[pos->let_nb - 1] == '\n' && *act_co == pos->len_prompt))
print_ans.c:		*act_co = pos->max_co - 1;
print_ans.c:	if (*act_co == pos->len_prompt - 1 && buf[0] == 127)
print_ans.c:		*act_co = pos->len_prompt;
print_ans.c:	i = pos->let_nb - 1;
print_ans.c:	if (pos->ans && ft_strchr(pos->ans, '\n' != 0))
print_ans.c:		write(1, pos->ans + i, ft_strlen(pos->ans) - i);
print_ans.c:	else if (pos->ans)
print_ans.c:		while (pos->ans[i])
print_ans.c:			if (pos->start_select != -1 && ((i >= pos->start_select && i <= pos->let_nb) || (i <= pos->start_select && i >= pos->let_nb)))
print_ans.c:			write(1, &pos->ans[i], 1);
print_ans.c:			if (act_co == 1 && pos->ans[i] == '\n' &&
print_ans.c:					i > 0 && pos->ans[i - 1] != '\n')
print_ans.c:			if (act_co == pos->max_co || pos->ans[i] == '\n')
print_ans.c:			if (pos->ans[i] == '\n' && pos->is_complete == 0)
print_ans.c:				act_co = pos->len_prompt;
print_ans.c:	act_co = pos->act_co;
print_ans.c:	act_li = pos->act_li;
print_ans.c:	if (buf[0] == 27 && pos->is_complete == 1)
print_ans.c:	else if (pos->is_complete == 0 && buf[0] == 27 &&
print_ans.c:	if (buf[0] == 27 && pos->is_complete == 1)
print_ans.c:		print_ans(pos, i, pos->start_co);
print_ans.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li),
search_in_history.c:		if (ft_strncmp(hist->cmd, pos->saved_ans,
search_in_history.c:					ft_strlen(pos->saved_ans)) == 0)
search_in_history.c:		ft_strncmp(hist->cmd, pos->saved_ans, ft_strlen(pos->saved_ans)) != 0)
search_in_history.c:		free(pos->ans);
search_in_history.c:		pos->ans = ft_strdup(hist->cmd);
search_in_history.c:		if (hist->cmd != NULL && ft_strncmp(hist->cmd, pos->saved_ans,
search_in_history.c:					ft_strlen(pos->saved_ans)) == 0)
search_in_history.c:		ft_strncmp(hist->cmd, pos->saved_ans, ft_strlen(pos->saved_ans)) != 0)
search_in_history.c:		free(pos->ans);
search_in_history.c:		pos->ans = ft_strdup(hist->cmd);
signal.c:	pos->max_co = tgetnum("co");
signal.c:	pos->max_li = tgetnum("li") - 1;
signal.c:	pos->let_nb = ft_strlen(pos->ans);
signal.c:	pos->len_ans = pos->let_nb;
signal.c:	tputs(tgoto(tgetstr("cm", NULL), 0, pos->start_li), 1, ft_putchar);
signal.c:	print_ans(pos, 0, pos->start_co);
signal.c:	free(pos->ans);
signal.c:	pos->debug += 1;
start_termcaps.c:	ft_printf("{B.T.cyan.}%s{eoc}", pos->prompt);
start_termcaps.c:	if (pos->prompt == NULL)
start_termcaps.c:		pos->prompt = ft_strdup("$ ");
start_termcaps.c:		if (pos->max_co > 2)
start_termcaps.c:		if (buf[0] == 10 && pos->is_complete == 1 && pos->replace_hist == 0)
start_termcaps.c:				pos->act_co, pos->act_li), 1, ft_putchar);
start_termcaps.c:			return (pos->ans);
start_termcaps.c:	pos->replace_hist = 0;
tab_key.c:	if (pos->let_nb == 0)
tab_key.c:	while (pos->ans[i] == ' ')
tab_key.c:	if (i == pos->let_nb)
tab_key.c:	while (pos->ans[i] && i < pos->let_nb)
tab_key.c:		if (pos->ans[i] == ' ')
tab_key.c:			while (pos->ans[i] == ' ' && i < pos->let_nb)
tab_key.c:			if (pos->ans[i] != ' ')
tab_key.c:		else if (is_on_token(pos->ans + i))
tab_key.c:			while (pos->ans[i] == ' ' && i < pos->let_nb)
tab_key.c:			if (i == pos->let_nb)
tab_key.c:	pos->ans_printed = 1;
tab_key_all_path.c:	i = pos->let_nb;
tab_key_all_path.c:	if (pos->ans[i] == 32)
tab_key_all_path.c:	while (i >= 0 && pos->ans[i] != '|' &&
tab_key_all_path.c:		pos->ans[i] != '&' && pos->ans[i] != 32)
tab_key_all_path.c:	while (pos->ans[j] && pos->ans[j] != '|' &&
tab_key_all_path.c:		pos->ans[j] != '&' && pos->ans[j] != 32)
tab_key_all_path.c:	ft_strncpy(name, pos->ans + i, j - i);
tab_key_auto_complete.c:	while (pos->ans[pos->let_nb] && pos->ans[pos->let_nb] != 32)
tab_key_auto_complete.c:		pos->let_nb += 1;
tab_key_auto_complete.c:	if (is_a_directory(pos->ans, pos))
tab_key_auto_complete.c:	else if (pos->let_nb == ft_strlen(pos->ans))
tab_key_auto_complete.c:	tputs(tgoto(tgetstr("cm", NULL), 0, pos->start_li), 1, ft_putchar);
tab_key_auto_complete.c:	print_ans(pos, 0, pos->start_co);
tab_key_auto_complete.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co , pos->act_li), 1, ft_putchar);
tab_key_tools_calcul_print.c:	if (pos->let_nb == ft_strlen(pos->ans))
tab_key_tools_calcul_print.c:		return (pos->let_nb - 1);
tab_key_tools_calcul_print.c:	i = pos->let_nb;
tab_key_tools_calcul_print.c:	if (pos->ans[i] == 32)
tab_key_tools_calcul_print.c:	while (pos->ans[i + 1] != 32 && pos->ans[i + 1])
tab_key_tools_calcul_print.c:	if ((max_word = pos->max_co / (htab->lenght_max + 4)) == 0)
tab_key_tools_calcul_print.c:	get_cursor_info(pos, &pos->start_li, &pos->start_co);
tab_key_tools_calcul_print.c:	write(1, pos->ans, ft_strlen(pos->ans));
tab_key_tools_calcul_print.c://	pos->navigation = 2;
tab_key_tools_calcul_print.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li), 1, ft_putchar);
tab_key_tools_manip.c:	i = pos->let_nb;
tab_key_tools_manip.c:	while (i > 0 && pos->ans[i - 1] != ' ')
tab_key_tools_manip.c:	while (pos->ans[len] && pos->ans[len] != ' ')
tab_key_tools_manip.c:	search = ft_strndup(pos->ans + i, len - i);
tab_key_tools_manip.c:	while (pos->ans[pos->let_nb] && pos->ans[pos->let_nb] != 32)
tab_key_tools_manip.c:	while (search_i >= 0 && pos->let_nb + 1 >= 0 &&
tab_key_tools_manip.c:		pos->ans[pos->let_nb - 1]))
tab_key_tools_manip.c:	i = ft_strlen(pos->ans) - 1;
tab_key_tools_manip.c:	while (pos->ans[pos->let_nb] && pos->ans[pos->let_nb] != ' ')
tab_key_tools_manip.c:		pos->let_nb += 1;
tab_key_tools_manip.c:	if (pos->ans[pos->let_nb - 1] != '/' &&
tab_key_tools_manip.c:		!(pos->ans[pos->let_nb - 1] == '.' &&
tab_key_tools_manip.c:		(pos->ans[pos->let_nb - 2] == '/' ||
tab_key_tools_manip.c:		pos->ans[pos->let_nb - 2] == ' ')))
tools.c:		pos->start_co, pos->start_li), 1, ft_putchar);
tools.c:		pos->start_co, pos->start_li), 1, ft_putchar);
tools.c:	pos->act_li = pos->start_li + len / pos->max_co;
tools.c:	pos->act_co = len % pos->max_co;
tools.c:	while (pos->act_li > pos->max_li)
tools.c:		pos->act_li -= 1;
tools.c:	pos->let_nb = ft_strlen(pos->ans);
tools.c:	pos->len_ans = pos->let_nb;
tools.c:	tputs(tgoto(tgetstr("cm", NULL), pos->act_co, pos->act_li), 1, ft_putchar);
